// Generated by CoffeeScript 1.6.3
(function() {
  var compData,dataFilePatterns, dataFilePaths, env, fs, globalData, loadData, path, urlData, _,baseDir;

  fs = require("fs");

  path = require("path");

  env = require("./enviroments");

  glob = require('glob')

  _ = require("lodash");

  dataFilePatterns = env.dataFilePatterns;

  urlData = {};

  compData = {};

  globalData = {};

  baseDir = process.cwd();

  loadData = function(dataFilePath) {
    var data;
    if (fs.existsSync(dataFilePath)) {
      data = require(dataFilePath);
      urlData = _.assign(urlData, data.urls);
      compData = _.assign(compData, data.comps);
      return globalData = _.assign(globalData, data.globals);
    }
  };

  var updateData = function(dataFilePath) {
    console.log(dataFilePath);
    var err;
    require.cache[dataFilePath] = null;
    try {
      loadData(dataFilePath);
      return console.log("[Data Reload] " + dataFilePath);
    } catch (_error) {
      err = _error;
      return console.log("[Data Reload Error] " + dataFilePath + " - " + err);
    }
  };

  _.each(dataFilePatterns,function (dataFilePattern){
    dataFilePaths = glob.sync(dataFilePattern);
    let paths = _.map(dataFilePaths,function (dataFilePath){
      return path.resolve(baseDir,dataFilePath);
    });
    _.each(paths, loadData);
  })

  module.exports = {
    getUrlData: function(path, method, params) {
      var data;
      if (!_.has(urlData, path)) {
        return {
          found: false
        };
      }
      data = urlData[path];
      return {
        found: true,
        result: _.isFunction(data) ? data(params, method) : data
      };
    },
    getCompData: function(path, params) {
      var data;
      if (!_.has(compData, path)) {
        return {
          found: false
        };
      }
      data = compData[path];
      return {
        found: true,
        result: _.isFunction(data) ? data(params) : data
      };
    },
    getGlobalData: function() {
      return globalData;
    },
    updateData: updateData
  };

}).call(this);
